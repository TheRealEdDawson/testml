#!/usr/bin/env testml-switch

Diff = 1
*input.undent.compile == *output

=== Undent transform
--- input
    === Test 1
    --- foo(<)
        xxx
        yyy

    --- end

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": "xxx\nyyy\n",
      "end": ""}]}

=== Keep blanks transform
--- input
    === Test 1
    --- foo(+)
    xxx
    yyy


    --- end

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": "xxx\nyyy\n\n\n",
      "end": ""}]}

=== Keep comments transform
--- input
    === Test 1
    --- foo(#)
    # xxx
    yyy
    --- bar
    # xxx
    yyy

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": "# xxx\nyyy\n",
      "bar": "yyy\n"}]}

=== Chomp transform
--- input
    === Test 1
    --- foo(-)
    xxx
    yyy

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": "xxx\nyyy"}]}

=== Point inheritance with transforms
--- input
    === Test 1
    --- foo(-)
    xxx
    yyy
    === Test 2
    --- ^foo()

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": "xxx\nyyy"},
    { "Label": "Test 2",
      "foo": "xxx\nyyy\n"}]}

=== Point inheritance from different name with transforms
--- input
    === Test 1
    --- foo(-)
    xxx
    yyy

    === Test 2
    --- ^bar=foo(+)

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": "xxx\nyyy"},
    { "Label": "Test 2",
      "bar": "xxx\nyyy\n\n"}]}

=== Use auto transforms on inherited point
--- input
    === Test 1
    --- foo(+)
    xxx
    yyy

    === Test 2
    --- ^foo

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": "xxx\nyyy\n\n"},
    { "Label": "Test 2",
      "foo": "xxx\nyyy\n\n"}]}

=== Comments removed by default
--- input
    === Test 1
    --- foo
    # Comment
     # Not Comment
    # Comment
--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": " # Not Comment\n"}]}

=== Regex transform
--- input
    === Test 1
    --- foo(/)
    this
      .*
    that
    --- bar(/): this.*that

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": ["/","this\n  .*\nthat","x"],
      "bar": ["/","this.*that"]}]}

=== Strip blank lines transform
--- input
    === Test 1
    --- foo(~)
    line 1

    line 2


    line 3

    --- bar(~-)
    line 1

    line 2


    line 3

    --- baz(~@)
    line 1

    line 2


    line 3

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": "line 1\nline 2\nline 3\n",
      "bar": "line 1\nline 2\nline 3",
      "baz": [["line 1","line 2","line 3"]]}]}

=== List transform
--- input
    === Test 1
    --- foo(@)
    line 1
    line 2
    line 3
    --- bar(@): one two three
    --- baz(@/)
    a b c.*$
    this.*that

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": [["line 1","line 2","line 3"]],
      "bar": [["one","two","three"]],
      "baz": [[
          ["/","a b c.*$"],
          ["/","this.*that"]]]}]}

=== Transforms and Inheritance
--- input
    === Test 1
    --- a(~)
    line 1

    line 2

    line 3

    --- ^b=a

    --- ^c=a()

    --- ^d=a(@)

    --- ^e=d(/)

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "a": "line 1\nline 2\nline 3\n",
      "b": "line 1\nline 2\nline 3\n",
      "c": "line 1\n\nline 2\n\nline 3\n",
      "d": [["line 1","","line 2","","line 3"]],
      "e": [[
          ["/","line 1"],
          ["/",""],
          ["/","line 2"],
          ["/",""],
          ["/","line 3"]]]}]}

=== Comments and Inheritance
--- input
    === Test 1
    --- a
    line 1
    # Comment
    line 2

    --- ^b=a(#)

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "a": "line 1\nline 2\n",
      "b": "line 1\n# Comment\nline 2\n"}]}

=== Don't inherit previous transforms unless using ^x=y form
--- input
    === Test 1
    --- regex(/): I like pie

    === Test 2
    --- ^regex(@/)

    === Test 3
    --- ^regex(/)

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "regex": ["/","I like pie"]},
    { "Label": "Test 2",
      "regex": [[
          ["/","I"],
          ["/","like"],
          ["/","pie"]]]},
    { "Label": "Test 3",
      "regex": ["/","I like pie"]}]}

=== Strip comments before trailing blank lines
--- input
    === Test1
    --- foo
    line 1


    # Comment about Test 2
    === Test 2
--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test1",
      "foo": "line 1\n"},
    { "Label": "Test 2"}]}

=== CoffeeScript object syntax transform
--- SKIP: Need to parse this with pegex, not coffeescript
--- input
    === Test1
    --- foo(%): {foo: 'bar', bar: 42}
    --- bar(%)
    foo:
      bar: 1234
    --- baz(%)
    {
      "foo": [
         22
      ]
    }
    --- boo(%)
    ['foo', 123]

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test1",
      "foo": [
        { "foo": "bar",
          "bar": 42}],
      "bar": [
        { "foo": {
            "bar": 1234}}],
      "baz": [
        { "foo": [22]}],
      "boo": [["foo",123]]}]}

=== Double quoted string semantics
--- input
    === Test1
    --- foo(")
    foo\tbar
    foo\nbar
    foo\\bar
    --- ^bar=foo(@")

--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test1",
      "foo": "foo\tbar\nfoo\nbar\nfoo\\bar\n",
      "bar": [["foo\tbar","foo\nbar","foo\\bar"]]}]}

=== Leading backslash no longer an escape
--- input
    === Test 1
    --- foo
    # Comment
    \n
    \# Not Comment
--- output
{ "testml": "0.3.0",
  "code": [],
  "data": [
    { "Label": "Test 1",
      "foo": "\\n\n\\# Not Comment\n"}]}

# vim: ft= sw=2:
